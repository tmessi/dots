# vim: set filetype=sh :

[[ -f /usr/bin/gulp ]] && eval "$(gulp --completion=bash)"
[[ -f "$HOME/.gc/google-cloud-sdk/completion.bash.inc" ]] && source "$HOME/.gc/google-cloud-sdk/completion.bash.inc"
which doctl &> /dev/null && source <(doctl completion bash)

which jira &> /dev/null && eval "$(jira --completion-script-bash)"

__ws_comp()
{
    local cur=${COMP_WORDS[COMP_CWORD]}

    words=$(\ls ~/workspace)
    COMPREPLY=( $(compgen -W "$words" -- $cur) )
}
complete -F __ws_comp ws

__vws_comp()
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    words=$(find ~/workspace -maxdepth 2 -iname 'vagrantfile' -printf '%h ' | xargs -n1 basename)
    COMPREPLY=( $(compgen -W "$words" -- $cur) )
}
complete -F __vws_comp vws

# Thanks to Gavin Panella
# http://blog.allenap.me/2013/08/change-directory-to-go-package-with-tab.html
_gcd() {
    local cur path paths
    # The current word due for completion.
    cur=${COMP_WORDS[COMP_CWORD]}
    # Non-local array storing the possible completions.
    COMPREPLY=()
    # Split GOPATH by colon, being careful about whitespace.
    IFS=: read -a paths -r <<< "$GOPATH"
    # Iterate GOPATH, again being careful about whitespace.
    for path in "${paths[@]}"; do
        COMPREPLY=(
            "${COMPREPLY[@]}"
            # Ignore missing directories on GOPATH.
            $(cd "${path}/src" 2> /dev/null &&
                compgen -o dirnames "${cur}")
        )
    done
    return 0
}
complete -F _gcd -o nospace -S / gcd


# From: https://github.com/django/django/blob/master/extras/django_bash_completion
# #########################################################################
# This bash script adds tab-completion feature to django-admin.py and
# manage.py.
#
# Testing it out without installing
# =================================
#
# To test out the completion without "installing" this, just run this file
# directly, like so:
#
#     . ~/path/to/django_bash_completion
#
# Note: There's a dot ('.') at the beginning of that command.
#
# After you do that, tab completion will immediately be made available in your
# current Bash shell. But it won't be available next time you log in.
#
# Installing
# ==========
#
# To install this, point to this file from your .bash_profile, like so:
#
#     . ~/path/to/django_bash_completion
#
# Do the same in your .bashrc if .bashrc doesn't invoke .bash_profile.
#
# Settings will take effect the next time you log in.
#
# Uninstalling
# ============
#
# To uninstall, just remove the line from your .bash_profile and .bashrc.

_django_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   DJANGO_AUTO_COMPLETE=1 $1 ) )
}
complete -F _django_completion -o default django-admin.py manage.py django-admin

_python_django_completion()
{
    if [[ ${COMP_CWORD} -ge 2 ]]; then
        PYTHON_EXE=${COMP_WORDS[0]##*/}
        echo $PYTHON_EXE | egrep "python([2-9]\.[0-9])?" >/dev/null 2>&1
        if [[ $? == 0 ]]; then
            PYTHON_SCRIPT=${COMP_WORDS[1]##*/}
            echo $PYTHON_SCRIPT | egrep "manage\.py|django-admin(\.py)?" >/dev/null 2>&1
            if [[ $? == 0 ]]; then
                COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]:1}" \
                               COMP_CWORD=$(( COMP_CWORD-1 )) \
                               DJANGO_AUTO_COMPLETE=1 ${COMP_WORDS[*]} ) )
            fi
        fi
    fi
}

# Support for multiple interpreters.
unset pythons
if command -v whereis &>/dev/null; then
    python_interpreters=$(whereis python | cut -d " " -f 2-)
    for python in $python_interpreters; do
        pythons="${pythons} ${python##*/}"
    done
    pythons=$(echo $pythons | tr " " "\n" | sort -u | tr "\n" " ")
else
    pythons=python
fi

complete -F _python_django_completion -o default $pythons
complete -C /home/tim/go/bin/gocomplete go


complete -F _autojump f

_cli_bash_autocomplete() {
  if [[ "${COMP_WORDS[0]}" != "source" ]]; then
    local cur opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == "-"* ]]; then
      opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} ${cur} --generate-bash-completion )
    else
      opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion )
    fi
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
  fi
}

complete -C boundary boundary
complete -C vault vault

complete -o bashdefault -o default -o nospace -F _cli_bash_autocomplete cci

### FZF things
if which fzf &> /dev/null; then
    [[ -f /usr/share/bash-completion/completions/fzf ]] && source /usr/share/bash-completion/completions/fzf
    [[ -f /home/tim/gentoo/usr/share/bash-completion/completions/fzf ]] && source /home/tim/gentoo/usr/share/bash-completion/completions/fzf
    [[ -f /home/tim/gentoo/usr/share/bash-completion/completions/fzf ]] && source /home/tim/gentoo/usr/share/bash-completion/completions/fzf
    [[ -f /usr/share/fzf/key-bindings.bash ]] && source /usr/share/fzf/key-bindings.bash

    export FZF_DEFAULT_OPTS="--height 50% --layout=reverse --border --preview 'fzf-preview {}'"

    _fzf_setup_completion path hexedit
fi
